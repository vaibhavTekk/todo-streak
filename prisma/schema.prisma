// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.Text
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  todos         Todo[]
  groups        Group[]
  followedBy    User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")
  score         Int       @default(0)
  currentStreak Int       @default(0)
  maxStreak     Int       @default(0)
  prevStreak    Int       @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id            String    @id @default(cuid())
  title         String
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  deadline      DateTime  @default(now()) @db.Timestamptz(6)
  completed     Boolean   @default(false)
  dateCompleted DateTime? @db.Timestamptz(6)
  User          User?     @relation(fields: [userId], references: [id])
  userId        String?
  Group         Group?    @relation(fields: [groupId], references: [id])
  groupId       String?
}

model Group {
  id     String  @id @default(cuid())
  title  String
  todos  Todo[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
